<!-- livebook:{"persist_outputs":true} -->

# AOC 22 - Day10

## Index

[Return to puzzles index](../../AdventOfCodeIndex.livemd)

**Index**

* [Puzzle 1](#cathode-ray-tube-(puzzle-1/2))
* [Puzzle 2](#cathode-ray-tube-(puzzle-2/2))

## Cathode-Ray Tube (Puzzle 1/2)

You avoid the ropes, plunge into the river, and swim to shore. 🏞️🏊‍♀️🏊‍♀️

🧝‍♀️🧝‍♀️ The Elves yell something about meeting back up with them upriver, but the river is too loud to tell exactly what they're saying. They finish crossing the bridge and disappear from view. 🌉🌉

📲 Situations like this must be why the Elves prioritized getting the communication system on your handheld device working, but the amount of water slowly draining from a big crack in its screen tells you it probably won't be of much immediate use.

Unless, that is, **you can design a replacement for the device's video system!** It seems to be some kind of **cathode-ray tube screen** and **simple CPU that are both driven by a precise clock circuit**. **The clock circuit ticks** at a constant rate; **each tick** is called a **cycle**. 🕦

**How to figure out the signal being sent by the CPU?** The CPU **has a single register**, **X**, which **starts with the value 1**. It **supports** only **two instructions**:

* `addx V` takes **2 cycles** to complete. After two cycles, **the X register is increased by the value V** (V can be negative.).
* `noop` takes **1 cycle** to complete. It **has no other effect**.

The **CPU uses these instructions in a program (your puzzle input) to**, somehow, **tell the screen what to draw.**

Consider the following small program:

```
noop
addx 3
addx -5
```

Execution of this program proceeds as follows:

* 🕛 **Cycle 1**: The `noop` instruction begins execution. During the first cycle, `X=1`.
* 🕛**Cycle 2**: The `addx 3` instruction begins execution. During the second cycle, `X=1`.
* 🕛**Cycle 3**: `X=1`. After it, `X=4`.
* 🕛**Cycle 4**: The `addx -5` instruction begins execution.
* 🕛**Cycle 5**, `X=4`.
* 🕛**Cycle 6**, the instruction finishes execution `X=-1`.

Maybe you can learn something by looking at the value of the X register throughout execution.

For now, **consider the signal strength** (`cycle_number * register_value`) **during the 20th cycle** and **every 40 cycles after that** (20th, 60th, 100th, 140th, 180th and 220th cycles).

For example, consider this larger program:

```
addx 15
addx -11
addx 6
addx -3
addx 5
addx -1
addx -8
addx 13
addx 4
noop
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx -35
addx 1
addx 24
addx -19
addx 1
addx 16
addx -11
noop
noop
addx 21
addx -15
noop
noop
addx -3
addx 9
addx 1
addx -3
addx 8
addx 1
addx 5
noop
noop
noop
noop
noop
addx -36
noop
addx 1
addx 7
noop
noop
noop
addx 2
addx 6
noop
noop
noop
noop
noop
addx 1
noop
noop
addx 7
addx 1
noop
addx -13
addx 13
addx 7
noop
addx 1
addx -33
noop
noop
noop
addx 2
noop
noop
noop
addx 8
noop
addx -1
addx 2
addx 1
noop
addx 17
addx -9
addx 1
addx 1
addx -3
addx 11
noop
noop
addx 1
noop
addx 1
noop
noop
addx -13
addx -19
addx 1
addx 3
addx 26
addx -30
addx 12
addx -1
addx 3
addx 1
noop
noop
noop
addx -9
addx 18
addx 1
addx 2
noop
noop
addx 9
noop
noop
noop
addx -1
addx 2
addx -37
addx 1
addx 3
noop
addx 15
addx -21
addx 22
addx -6
addx 1
noop
addx 2
addx 1
noop
addx -10
noop
noop
addx 20
addx 1
addx 2
addx 2
addx -6
addx -11
noop
noop
noop
```

The interesting signal strengths can be determined as follows:

* The **20th cycle**, register `X=21`, so the signal strength is `20 * 21 = 420`. 
  * The 20th cycle occurs in the middle of the second addx -1.
  * So, the `X` is all the other addx completed `1 + 15 - 11 + 6 - 3 + 5 - 1 - 8 + 13 + 4 = 21`.
* The **60th cycle**, register `X=19`, so the signal strength is `60 * 19 = 1140`.
* The **100th cycle**, register `X=18`, so the signal strength is `100 * 18 = 1800`.
* The **140th cycle**, register `X=21`, so the signal strength is `140 * 21 = 2940`.
* The **180th cycle**, register `X=16`, so the signal strength is `180 * 16 = 2880`.
* The **220th cycle**, register `X=18`, so the signal strength is `220 * 18 = 3960`.

The **sum of these signal strengths** is `13140`.

**Find the signal strength during the 20th, 60th, 100th, 140th, 180th, and 220th cycles. What is the sum of these six signal strengths?**

```elixir
## Read the file

# Livebook & Input file are in same directory
input_root = "#{__DIR__}/input.txt"

instructions =
  case File.read(input_root) do
    {:ok, input} ->
      input
      |> String.split("\n", trim: true)
      |> Enum.map(fn string ->
        [command | args] = String.split(string, " ")

        case command do
          "noop" ->
            {:noop, 0}

          "addx" ->
            [value] = args
            {:addx, String.to_integer(value)}
        end
      end)

    {:error, msg} ->
      IO.inspect(msg)
  end
```

<!-- livebook:{"output":true} -->

```
[
  noop: 0,
  noop: 0,
  addx: 5,
  noop: 0,
  noop: 0,
  addx: 6,
  addx: 4,
  addx: -4,
  addx: 4,
  addx: -6,
  addx: 11,
  addx: -1,
  addx: 2,
  addx: 4,
  addx: 3,
  noop: 0,
  addx: 2,
  addx: -30,
  addx: 2,
  addx: 33,
  noop: 0,
  addx: -37,
  noop: 0,
  noop: 0,
  noop: 0,
  addx: 3,
  addx: 2,
  addx: 5,
  addx: 20,
  addx: 7,
  addx: -24,
  addx: 2,
  noop: 0,
  addx: 7,
  addx: -2,
  addx: -6,
  addx: 13,
  addx: 3,
  addx: -2,
  addx: 2,
  noop: 0,
  addx: -5,
  addx: 10,
  addx: 5,
  addx: -39,
  addx: 1,
  addx: 5,
  noop: 0,
  addx: 3,
  noop: 0,
  ...
]
```

```elixir
defmodule CRT do
  @doc """
  Calculate the value of a register X during the execution of N instructions.
  First argument is the instructions and the second the initial value of X.

  ## Examples

  iex> CRT.calculate_x_during_cycles([{:noop, nil}, {:addx, 4},  {:noop, nil}], 1)
  [{5, 5}, {4, 5}, {3, 1}, {2, 1}, {1, 1}]

  """

  def calculate_x_during_cycles([], x, cycle, result), do: [{cycle, x} | result]

  def calculate_x_during_cycles([{instruct, value} | instructions], x, cycle, result) do
    case instruct do
      :noop ->
        calculate_x_during_cycles(instructions, x, cycle + 1, [{cycle, x} | result])

      :addx ->
        calculate_x_during_cycles(instructions, x + value, cycle + 2, [
          {cycle + 1, x},
          {cycle, x} | result
        ])

      _ ->
        calculate_x_during_cycles(instructions, x, cycle, result)
    end
  end

  def calculate_x_during_cycles(instructions, x),
    do: calculate_x_during_cycles(instructions, x, 1, [])

  def calculate_signal_strengths(instructions, range) do
    x_cycles = calculate_x_during_cycles(instructions, 1) |> Map.new()
    for cycle <- range, do: x_cycles[cycle] * cycle
  end

  @doc """
  X register controls the horizontal position of a sprite. 
  The sprite is 3 pixels wide, and the X register sets the 
  horizontal position of the middle of that sprite. 

  If the sprite is positioned such that one of its three pixels 
  is the pixel currently being drawn, the screen produces a 
  lit pixel (#); otherwise, the screen leaves the pixel dark (.).

  ## Examples

  iex> CRT.display([{:addx, 1}, {:addx, 3}, {:addx, -2}, {:addx, 1}], 4)
  :ok

  Output: 
   ####
   ..##
   .
  """
  def display(instructions, wide) do
    x_cycles = calculate_x_during_cycles(instructions, 1) |> Enum.reverse()

    for {cycle, value} <- x_cycles do
      position = rem(cycle - 1, wide)
      string = if position == 0, do: "\n", else: ""
      string <> if position in [value - 1, value, value + 1], do: "#", else: "."
    end
    |> List.to_string()
    |> IO.puts()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, CRT, <<70, 79, 82, 49, 0, 0, 17, ...>>, {:display, 2}}
```

```elixir
CRT.calculate_signal_strengths(instructions, 20..220//40)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
12980
```

## Cathode-Ray Tube (Puzzle 2/2)

It seems like the `X` register **controls the horizontal position** of a **sprite**. Specifically, the sprite is `3` **pixels wide**, and the `X` register **sets the horizontal position of the middle of that sprite**.

Counting the pixels on the CRT: **40 wide** (0..39) and **6 high**.

Like the CPU, the CRT is tied closely to the clock circuit: the CRT **draws a single pixel during each cycle**. **Representing each pixel** of the screen as a **#**, here are the cycles during which the first and last pixel in each row are drawn:

```
Cycle   1 -> ######################################## <- Cycle  40
Cycle  41 -> ######################################## <- Cycle  80
Cycle  81 -> ######################################## <- Cycle 120
Cycle 121 -> ######################################## <- Cycle 160
Cycle 161 -> ######################################## <- Cycle 200
Cycle 201 -> ######################################## <- Cycle 240
```

If the **sprite is positioned such that one of its three pixels is the pixel currently being drawn**, **the screen produces a lit pixel (#)**; **otherwise, the screen leaves the pixel dark (.)**.

The first few pixels from the larger example above are drawn as follows:

```
Sprite position: ###.....................................

Start cycle   1: begin executing addx 15
During cycle  1: CRT draws pixel in position 0
Current CRT row: #

During cycle  2: CRT draws pixel in position 1
Current CRT row: ##
End of cycle  2: finish executing addx 15 (Register X is now 16)
Sprite position: ...............###......................

Start cycle   3: begin executing addx -11
During cycle  3: CRT draws pixel in position 2
Current CRT row: ##.

During cycle  4: CRT draws pixel in position 3
Current CRT row: ##..
End of cycle  4: finish executing addx -11 (Register X is now 5)
Sprite position: ....###.................................

Start cycle   5: begin executing addx 6
During cycle  5: CRT draws pixel in position 4
Current CRT row: ##..#

During cycle  6: CRT draws pixel in position 5
Current CRT row: ##..##
End of cycle  6: finish executing addx 6 (Register X is now 11)
Sprite position: ..........###...........................

Start cycle   7: begin executing addx -3
During cycle  7: CRT draws pixel in position 6
Current CRT row: ##..##.

During cycle  8: CRT draws pixel in position 7
Current CRT row: ##..##..
End of cycle  8: finish executing addx -3 (Register X is now 8)
Sprite position: .......###..............................

Start cycle   9: begin executing addx 5
During cycle  9: CRT draws pixel in position 8
Current CRT row: ##..##..#

During cycle 10: CRT draws pixel in position 9
Current CRT row: ##..##..##
End of cycle 10: finish executing addx 5 (Register X is now 13)
Sprite position: ............###.........................

Start cycle  11: begin executing addx -1
During cycle 11: CRT draws pixel in position 10
Current CRT row: ##..##..##.

During cycle 12: CRT draws pixel in position 11
Current CRT row: ##..##..##..
End of cycle 12: finish executing addx -1 (Register X is now 12)
Sprite position: ...........###..........................

Start cycle  13: begin executing addx -8
During cycle 13: CRT draws pixel in position 12
Current CRT row: ##..##..##..#

During cycle 14: CRT draws pixel in position 13
Current CRT row: ##..##..##..##
End of cycle 14: finish executing addx -8 (Register X is now 4)
Sprite position: ...###..................................

Start cycle  15: begin executing addx 13
During cycle 15: CRT draws pixel in position 14
Current CRT row: ##..##..##..##.

During cycle 16: CRT draws pixel in position 15
Current CRT row: ##..##..##..##..
End of cycle 16: finish executing addx 13 (Register X is now 17)
Sprite position: ................###.....................

Start cycle  17: begin executing addx 4
During cycle 17: CRT draws pixel in position 16
Current CRT row: ##..##..##..##..#

During cycle 18: CRT draws pixel in position 17
Current CRT row: ##..##..##..##..##
End of cycle 18: finish executing addx 4 (Register X is now 21)
Sprite position: ....................###.................

Start cycle  19: begin executing noop
During cycle 19: CRT draws pixel in position 18
Current CRT row: ##..##..##..##..##.
End of cycle 19: finish executing noop

Start cycle  20: begin executing addx -1
During cycle 20: CRT draws pixel in position 19
Current CRT row: ##..##..##..##..##..

During cycle 21: CRT draws pixel in position 20
Current CRT row: ##..##..##..##..##..#
End of cycle 21: finish executing addx -1 (Register X is now 20)
Sprite position: ...................###..................
```

Allowing the program to run to completion causes the CRT to produce the following image:

```
##..##..##..##..##..##..##..##..##..##..
###...###...###...###...###...###...###.
####....####....####....####....####....
#####.....#####.....#####.....#####.....
######......######......######......####
#######.......#######.......#######.....
```

**Render the image given by your program. What eight capital letters appear on your CRT?**

```elixir
cycles = CRT.display(instructions, 40)
```

<!-- livebook:{"output":true} -->

```

###..###....##.#....####.#..#.#....###..
#..#.#..#....#.#....#....#..#.#....#..#.
###..#..#....#.#....###..#..#.#....#..#.
#..#.###.....#.#....#....#..#.#....###..
#..#.#.#..#..#.#....#....#..#.#....#....
###..#..#..##..####.#.....##..####.#....
.
```

<!-- livebook:{"output":true} -->

```
:ok
```

| Previous                     | Next                            |
| ---------------------------- | ------------------------------: |
| [Day 9](../Day9/Day9.livemd) | [Day 11](../Day11/Day11.livemd) |

[Return to puzzles index](../../AdventOfCodeIndex.livemd)
