<!-- livebook:{"persist_outputs":true} -->

# AOC 22 - Day6

## Index

[Return to puzzles index](../../AdventOfCodeIndex.livemd)

**Index**

* [Puzzle 1](#tuning-trouble-(puzzle-1/2))
* [Puzzle 2](#tuning-trouble-(puzzle-2/2))

## Tuning Trouble (Puzzle 1/2)

The preparations are finally complete; you and the **Elves leave camp on foot** and begin to make your way toward the star fruit grove. `🌴✨🌴.....🚶‍♀️🚶‍♀️....🏕️`

As you move through the dense undergrowth 🌳🌿, one of the Elves **gives you a handheld device** `✋📲`, which it has many fancy features. The **most important** one **to set up** right now is the **communication system**.

However, he convinced the other Elves that it would be okay to **give you their one malfunctioning device** - **surely you'll have no problem fixing it**.

🎆 As if inspired by comedic timing, the device emits a few colorful sparks. 🎆

🛠️ To **fix** the **communication system**, you need to **add a subroutine** to the device that detects a **start-of-packet marker** in the **datastream** (your input). In **Elves' protocol**, the **start of a packet** is indicated by a **sequence of 4 characters** that are **all different.**

The device will send your subroutine a datastream buffer (your puzzle input); **your subroutine needs** to **identify the first position** where the **four most recently received characters** were **all different**. Specifically, it **needs to report the number of characters from the beginning of the buffer to the end of the first such four-character marker**.

Example:

```
mjqjpqmgbljsphdztnvjfqwrcgsmlb
```

After the first three characters `mjq` have been received, there haven't been enough characters received yet to find the marker.

The first time a marker could occur is after the fourth character is received, making the most recent four characters `mjqj`. Because j is repeated, this isn't a marker.

The first time a marker appears is after the seventh character arrives. Once it does, the last four characters received are `jpqm`, which are all different. In this case, your **subroutine should report the value `7`**, because the first start-of-packet marker is complete after 7 characters have been processed.

More examples:

* `bvwbjplbgvbhsrlpgdmjqwftvncz`: first marker after character `5`
* `nppdvjthqldpwncqszvftbrmjlhg`: first marker after character `6`
* `nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg`: first marker after character `10`
* `zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw`: first marker after character `11`

**How many characters need to be processed before the first start-of-packet marker is detected?**

```elixir
## Read the file

# Livebook & Input file are in same directory
input_root = "#{__DIR__}/input.txt"

input =
  case File.read(input_root) do
    {:ok, input} ->
      input |> String.replace("\n", "")

    {:error, msg} ->
      IO.inspect(msg)
  end
```

<!-- livebook:{"output":true} -->

```
"rqwqtwwrmrqqrcrtrpppjrjgrgjgqgttgbbhppftpfpdpmpsstffqvfqvvdjjpllltqltqtrrzlllbldbdsdqqgpqggzccgbgnnmjmljmljldjldjjlnnhndhdmmslmslmlhmmntnrtnrnbrbqrqhqfftwftfsfzfcfrrzllchcwwtwstwwjwrjjfwwgzwzqzpzhzqhqbhqhssltsszhsszdssrwssdppjcpjjrwjwnwjnnzjjhsjhsjsjvvtffffqfflglwglgbgpbgbgghfghfhdfhdfhfssqppvlvslltwwhwvwpwgggnpnnmqnntqnnlhhdbhdbbtvvcrrcgrrdrvrjvvlmlnmndnmnrncnznsnsqnsswrwzwmwzzbpbhphqhpqpbpqpjpjvpvwpvwppdvdhdccqbccfncctrcrjcjjdsdhdnhhwpwlwwbmbhmbhhpzhhccvffqqnsqqmnnspnnpfpzppspgsppgbbdwbbdcchfhgfhfllljtllnjlnlddvcdvdqvvqwqppprtpthtthqqfbqqpfpzfpfcfsscrsccbgbngbbgdbbpgpqqlmqlmmgffqqqsbqbtblbwbqqvbqvbqvvnzvzpvvqhvqqtltptllbflbflbflltddlblflvfvbffmsffhlhshmmgbbgjjdndqqmqllzjzvvhjhnhcnchhznnhhppwqpwpffwvwzzppwpfwftwtnnqbnqnrnrzznffzzblzlvzlzrrszscsqcssbggcgvvddsttgqqgwgcclzzszddlvddvbddrlrcllrblrrhlldzdtdccqllsblsszlszzdllhjljhhhzhffdwfdwfddwdtdrtdtntddldsllqffdvdhdpdhdrdprprrhggdqgghggmwgmghhchlhmllrnrdrcrqccbqqfbqbccjpjhhvppcwpwffmmzzfqflfjfdfbfqqtmthmttwftwwpmpzplzzpvvgppsbpbccbtcbcddzbzwwmsscrcctgtgjgtjthhjzzcqqmmmvccwjcwjwzzwnnwgwtgwwbsbvbccrscccnggfjfwfjfrfsfddncdncndnqqwzzmssbdsbswswdddpdqdbddcvcmmwwssrtrrlddndmdtmtdmttwwmsmffwqwvwbwhbbqfqqgcqcmctctntjntnbnrbrmbbqtqccqbcbvbnbqnnghgbbmfmwmdwmdmpmwppdwpdwwnzwnwrnwrnntqnttcmcqqbrqrttsjtstcscpcspsnswsggrhggjrjjbhhbnbmmdlmddtqdtdrdwwjvjgjjdhjdddbwwsfflppbwbcbpbjjzqznnrwnnvmvjvwvqqrlljgjmjjqhjhwjhwjjsvsnvvlwlqqjpjjbsjjcddtfthffrqfrqrfqfrfllfzzqllztltnltntpttqmmgwmwwwjjdrjrzrlrwlwzzzzphpphvphvphvpvdvfdflljgglrlrqlrrfpfqpqnpqpmmblbflbfbpfpwpjwpjpbjpjmjljblldbllnrnjjjljrlrcrrgzgbbzrznzzhnzhhtmhmqhmqqnzzvfzvzfftjftfvvpmvppwzzhnzhzvvwzwwqcwctwwgrrtgglgngsgvgwvwpvpbbrvrvwrvwvbwwpsprrrcbbpqppfjjjqnjndnmddvsvlslmmwwdwcchmmrjmjwwsrwrhwwpcgmpmvbdmlmqbnblbbgtmtgqslnvcnmwrflrnwhqzrsnwhncwdvbcpjrqsscwzrjvslhscpvmqjnltwhshjmbhgttbzllrvpnhgdmwtddbwmpgbhrndpgwzfvqdmpcvhlnjnqbwqmshgwhmfjgsbscsjtfbfvmlljqwwjtnltbzjpcqdfmdldvmsnmzqmghcvhlpjzzszcpvldrflbcppzwgppfpbslplrqwgbfwpwbtbnrmbrrrpqndzvhmlhvtlnjvhdrhhvmwzjntsgffjsdpdlhnlslnbmbsmdsvpmpbjpjcwhbpfnhbmttfglglnnhhcqvbpvnrwcszwjsdhqwctrpgsrcbfpzhbnrbllrlflqdlgzwpwgwwvmbsppbcjcdltbgwfndqjlvndhtclfmwnqrbfvvqdzspfcslplhtmsqqtrcdvbhfscvnmzplcglwnzbvgflclclqmdgfzjqqrrmpcqrzgqcnzbmncmvdzrmmvfqrrqzqbjmjgjwmfbnmmgvmzsgjjspjqbvfhrdvllgqsffjnfqdthjbjwhwqdqhsnctwgbszvrsbwbpptcjjvftnhdmwmhtjrjrlrdrqjznhqftgtldnpbrlprjmplmwdbzqpmwwvcqccjlhqbhcjprvrfmmfmljwmbrlhcglthgbmrfmbpsztfcglpzlfbpjhmvcmvrprmvmrvvgbbllzschwshhfbnmgwrbhlqvsdjdmmbtjzthwssghtqvhtqcswdhbwhphhsrwhwwtslwvrhpgqfmftnrtqpwfqqdgftdlqfndjlzhvlrthnqdqrzpprdgwwqlplrmqtdqgbdntmjcjhlbbmctvnnhtppfbjpsbmndbdplqlfqfhzqvtqcvmprwbhdtjrqrqvmcssqnfqwtchmjfjlpwsghplbthdnbhfbhhphdmlmtjcvmzjbnqbfldrvlmjfnnrlsnwrtnrpfqdhchltmbvjzhgjwzblqdthmffztqvzzfszmdqdzlfpbfgjfdjqscrhvjflbllnlghncczrlpcbwpnmzcnqhbfnlmnbqvmwvbchwhlfcssctsdcwmtfdgbhljwprfncdgwlgzzmvfqrdsmlwbrmbmtzqqdqdpzvtbstscglrwdpndnstrhgjchnpzsvcjngmzsddwsbllpvqqzzjlmsbncbndqmqphzqzcngjzpfnjmsvngtcvhhjsssrnhjrsmvbsrdjcrppvgsqbqjzbrhjqlgmqfclbrdhwwjdlsjnmjcjrmsstngswrhmdqthprcbrndfpdjgpqtfmmfvbztqdhzhzbzhjjpfgnvrmspdvmhfvbvztmlrhfqfdcfnzzndlfldpfhrbjrwlwnprdmqjwppbrdjhpbvnrvjlrbwdwttzhqqgcclbwghbgrhcvwjrrchqgzztrjgrltcpdscjdfcphndfzdqsbpsjrljdnflfvrzcrjflddfgpvnpmdqbhzwbfrpzsnpbcbgfchvvmqpnfpvvdvhfnpbfzwmbnlpqzgrpwtsjbpzdrsfmnfqwqvpgnrjhmvmphlfdpfhdjljlzftdzdvhjrvjdctwfrctglwmrtdlrvmhcqvfvpgmstghczmvclptzspdsrlvrgvjtvflhsmqswdpqjrrnhgrggzmcpqsctqbhpqrsbstwzgzghqgltcpbrhbcdqlhfjhlcrnhrpjdzlzqqprvzntbjztqgdqqttmbpbcfbjmdjqsflbczmfnsjdzcnnmjjllhvwbwlgrlpvbffwjvctwnrsfqdnwntscpsjnshhdmcqmcpscrmzltldwlmfnbhbtprsgtsbvzfrsfpvmqjzjqqhwdjjzvbhrvtbscrcpzrqsbgfbpwqfmbsrlhhtntjmtrtlwqsdbmgtdlrwfdnmwwzlltbrjgghbstbnffzmzzdlcdgvmrzsjnqjvczmhrgwbrblrqfmzbbcnfsbfpgjsmptzbclfdnwfgbzlpbgqrdhdmfjdnlzczdpvtbzdmrthslngbrldllfcjplhglmwsfpqjnrgpgqfmbbwchbrqqsncfwnmgdmtchdhlzzqjvtvtvgqbtwvwpsjqwdqhrlfmdgdzchvfbcmqjllpjtnphwqvfwpcjmzqhsbwlcmbsgththrsjtnzlsrcptgtrfcwptbstcsdzbwjljzjztzbqsjdvwglpbpgdjtthjjmsnljltglqcszbzqmblfpncntjzzhmjffldcrcvjjswvzlfffrmsgjtpzggtlpfwpwbmhmggpnmzwrgdjrhglnhfdcjdfjtdjvrnlgqtfqmpgjcvcmnwhhbczwwntfbmgssglngqlttfpcznswvmbprsrzljtlwlljnbbrnwdvvlsbdv"
```

```elixir
defmodule ElvesComunicationSystem do
  @doc """
  Check if a list contains duplicate items.

  ## Examples

  iex> ElvesComunicationSystem.contains_duplicates?('qwsq')
  true

  iex> ElvesComunicationSystem.contains_duplicates?('qwsr')
  false

  """
  def contains_duplicates?(l), do: length(Enum.uniq(l)) < length(l)

  @doc """
  Giving a list and a window's size, return the number of items processed 
  to find a window without duplicates.

  ## Examples

  iex>  ElvesComunicationSystem.detect_start("qqqsqas",2)
  4

  iex>  ElvesComunicationSystem.detect_start("asdf", 2)
  2

  """
  def detect_start(_, processed_items, _, false), do: processed_items

  def detect_start([char | unproccesed_ds], processed_items, [_processed_char | window], true) do
    new_window = window ++ [char]

    detect_start(
      unproccesed_ds,
      processed_items + 1,
      new_window,
      contains_duplicates?(new_window)
    )
  end

  def detect_start(datastream, window_size) do
    [window, ds] =
      datastream
      |> String.split_at(window_size)
      |> Tuple.to_list()
      |> Enum.map(&String.to_charlist/1)

    detect_start(ds, window_size, window, contains_duplicates?(window))
  end

  def detect_start_of_packet(datastream), do: detect_start(datastream, 4)
  def detect_start_of_msg(datastream), do: detect_start(datastream, 14)
end
```

<!-- livebook:{"output":true} -->

```
{:module, ElvesComunicationSystem, <<70, 79, 82, 49, 0, 0, 13, ...>>, {:detect_start_of_msg, 1}}
```

```elixir
input
|> ElvesComunicationSystem.detect_start_of_packet()
```

<!-- livebook:{"output":true} -->

```
1707
```

## Tuning Trouble (Puzzle 2/2)

😔😔 Your **device's communication system** is correctly detecting packets, but **still isn't working**. It looks like it **also needs to look for messages**.

A **start-of-message marker consists of 14 distinct characters, rather than 4**.

Examples:

* `mjqjpqmgbljsphdztnvjfqwrcgsmlb`: first marker after character `19`.
* `bvwbjplbgvbhsrlpgdmjqwftvncz`: first marker after character `23`.
* `nppdvjthqldpwncqszvftbrmjlhg`: first marker after character `23`.
* `nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg`: first marker after character `29`.
* `zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw`: first marker after character `26`.

**How many characters need to be processed before the first start-of-message marker is detected?**

```elixir
input
|> ElvesComunicationSystem.detect_start_of_msg()
```

<!-- livebook:{"output":true} -->

```
3697
```

| Previous                     | Next                         |
| ---------------------------- | ---------------------------: |
| [Day 5](../Day5/Day5.livemd) | [Day 7](../Day7/Day7.livemd) |

[Return to puzzles index](../../AdventOfCodeIndex.livemd)
